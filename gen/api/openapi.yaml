openapi: 3.0.2
info:
  contact:
    email: contact@example.com
    url: http://example.com/contact
  description: "This is an **example** API to demonstrate features of OpenAPI specification\n\
    # Introduction\nThis API definition is intended to to be a good starting point\
    \ for describing your API in \n[OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).\n\
    It also demonstrates features of [create-openapi-repo](https://github.com/Redocly/create-openapi-repo)\
    \ tool and \n[Redoc](https://github.com/Redocly/Redoc) documentation engine. So\
    \ beyond the standard OpenAPI syntax we use a few \n[vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).\n\
    \n# OpenAPI Specification\nThe goal of The OpenAPI Specification is to define\
    \ a standard, language-agnostic interface to REST APIs which\nallows both humans\
    \ and computers to discover and understand the capabilities of the service without\
    \ access to source\ncode, documentation, or through network traffic inspection.\
    \ When properly defined via OpenAPI, a consumer can \nunderstand and interact\
    \ with the remote service with a minimal amount of implementation logic. Similar\
    \ to what\ninterfaces have done for lower-level programming, OpenAPI removes the\
    \ guesswork in calling the service.\n"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://example.com/terms/
  title: Example.com
  version: 1.0.0
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: https://github.com/Rebilly/generator-openapi-repo
servers:
- url: http://example.com/api/v1
- url: https://example.com/api/v1
tags:
- description: Example echo operations
  name: Echo
- description: Operations about user
  name: User
paths:
  /users/{username}:
    get:
      description: "Some description of the operation. \nYou can use `markdown` here.\n"
      operationId: getUserByName
      parameters:
      - description: The name that needs to be fetched
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Filter users without email
        in: query
        name: with_email
        schema:
          type: boolean
      - description: Pretty print response
        in: query
        name: pretty_print
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                username: user1
                email: user@example.com
              schema:
                $ref: '#/components/schemas/users@{username}'
          description: Success
        "403":
          description: Forbidden
        "404":
          description: User not found
      security:
      - main_auth:
        - read:users
      - api_key: []
      summary: Get user by user name
      tags:
      - User
      x-accepts: application/json
    parameters:
    - description: Pretty print response
      in: query
      name: pretty_print
      schema:
        type: boolean
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: The name that needs to be updated
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Pretty print response
        in: query
        name: pretty_print
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users@{username}'
          application/xml:
            schema:
              $ref: '#/components/schemas/users@{username}'
        description: Updated user object
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
      - main_auth:
        - write:users
      summary: Updated user
      tags:
      - User
      x-contentType: application/json
      x-accepts: application/json
  /echo:
    post:
      description: Receive the exact message you've sent
      operationId: echo
      requestBody:
        content:
          application/json:
            schema:
              example: Hello world!
              type: string
          application/xml:
            schema:
              example: Hello world!
              type: string
        description: Echo payload
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value: Hello world!
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                format: int32
                type: integer
            X-Expires-After:
              $ref: '#/components/headers/'
      security:
      - api_key: []
      - basic_auth: []
      summary: Echo test
      tags:
      - Echo
      x-contentType: application/json
      x-accepts: application/json
components:
  headers:
    ? ""
    : description: date in UTC when token expires
      schema:
        format: date-time
        type: string
  schemas: {}
  securitySchemes:
    main_auth:
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
    basic_auth:
      scheme: basic
      type: http

